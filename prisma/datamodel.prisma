type User {
  id: ID! @id
  name: String!
  email: String! @unique
  password: String!
  birthYear: Int!
  avatar: String
  verified: Boolean @default(value: false) # If the account has been verified by email
  role: Role! @default(value: USER)
  wallpapers: [Wallpaper!]! @relation(name: "WallpaperToUser", onDelete: CASCADE)
  refreshTokens: [RefreshToken!]! @relation(name: "UserToRefreshToken", onDelete: CASCADE)
  resetPasswordTokens: [ResetPasswordToken!]! @relation(name: "UserToResetPasswordToken", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# User's  wallpapers
type Wallpaper {
  id: ID! @id
  wallpaperId: String! # Wallpaper's ID given by the Source (PEXELS or UNSPLASH)
  source: Source!
  user: User! @relation(name: "WallpaperToUser")
  rating: Float @default(value: 0) # Up to 5 stars rating for the Wallpaper from the user
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type RefreshToken {
  id: ID! @id
  user: User! @relation(name: "UserToRefreshToken")
  refreshToken: String! @unique
  accessToken: String! @unique
  expiresIn: String! # This is suppose to be a type Long but Prisma does not currently have supports for it
  revoke: Boolean @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ResetPasswordToken {
  id: ID! @id
  user: User! @relation(name: "UserToResetPasswordToken")
  token: String! @unique
  expiresIn: String! # This is suppose to be of type Long but Prisma currently does not have supports for it
  revoke: Boolean @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Source {
  PEXELS
  UNSPLASH
}
