// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  refreshToken: (where?: RefreshTokenWhereInput) => Promise<boolean>;
  resetPasswordToken: (
    where?: ResetPasswordTokenWhereInput
  ) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  wallpaper: (where?: WallpaperWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  refreshToken: (
    where: RefreshTokenWhereUniqueInput
  ) => RefreshTokenNullablePromise;
  refreshTokens: (args?: {
    where?: RefreshTokenWhereInput;
    orderBy?: RefreshTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RefreshToken>;
  refreshTokensConnection: (args?: {
    where?: RefreshTokenWhereInput;
    orderBy?: RefreshTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RefreshTokenConnectionPromise;
  resetPasswordToken: (
    where: ResetPasswordTokenWhereUniqueInput
  ) => ResetPasswordTokenNullablePromise;
  resetPasswordTokens: (args?: {
    where?: ResetPasswordTokenWhereInput;
    orderBy?: ResetPasswordTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ResetPasswordToken>;
  resetPasswordTokensConnection: (args?: {
    where?: ResetPasswordTokenWhereInput;
    orderBy?: ResetPasswordTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResetPasswordTokenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  wallpaper: (where: WallpaperWhereUniqueInput) => WallpaperNullablePromise;
  wallpapers: (args?: {
    where?: WallpaperWhereInput;
    orderBy?: WallpaperOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Wallpaper>;
  wallpapersConnection: (args?: {
    where?: WallpaperWhereInput;
    orderBy?: WallpaperOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WallpaperConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRefreshToken: (data: RefreshTokenCreateInput) => RefreshTokenPromise;
  updateRefreshToken: (args: {
    data: RefreshTokenUpdateInput;
    where: RefreshTokenWhereUniqueInput;
  }) => RefreshTokenPromise;
  updateManyRefreshTokens: (args: {
    data: RefreshTokenUpdateManyMutationInput;
    where?: RefreshTokenWhereInput;
  }) => BatchPayloadPromise;
  upsertRefreshToken: (args: {
    where: RefreshTokenWhereUniqueInput;
    create: RefreshTokenCreateInput;
    update: RefreshTokenUpdateInput;
  }) => RefreshTokenPromise;
  deleteRefreshToken: (
    where: RefreshTokenWhereUniqueInput
  ) => RefreshTokenPromise;
  deleteManyRefreshTokens: (
    where?: RefreshTokenWhereInput
  ) => BatchPayloadPromise;
  createResetPasswordToken: (
    data: ResetPasswordTokenCreateInput
  ) => ResetPasswordTokenPromise;
  updateResetPasswordToken: (args: {
    data: ResetPasswordTokenUpdateInput;
    where: ResetPasswordTokenWhereUniqueInput;
  }) => ResetPasswordTokenPromise;
  updateManyResetPasswordTokens: (args: {
    data: ResetPasswordTokenUpdateManyMutationInput;
    where?: ResetPasswordTokenWhereInput;
  }) => BatchPayloadPromise;
  upsertResetPasswordToken: (args: {
    where: ResetPasswordTokenWhereUniqueInput;
    create: ResetPasswordTokenCreateInput;
    update: ResetPasswordTokenUpdateInput;
  }) => ResetPasswordTokenPromise;
  deleteResetPasswordToken: (
    where: ResetPasswordTokenWhereUniqueInput
  ) => ResetPasswordTokenPromise;
  deleteManyResetPasswordTokens: (
    where?: ResetPasswordTokenWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWallpaper: (data: WallpaperCreateInput) => WallpaperPromise;
  updateWallpaper: (args: {
    data: WallpaperUpdateInput;
    where: WallpaperWhereUniqueInput;
  }) => WallpaperPromise;
  updateManyWallpapers: (args: {
    data: WallpaperUpdateManyMutationInput;
    where?: WallpaperWhereInput;
  }) => BatchPayloadPromise;
  upsertWallpaper: (args: {
    where: WallpaperWhereUniqueInput;
    create: WallpaperCreateInput;
    update: WallpaperUpdateInput;
  }) => WallpaperPromise;
  deleteWallpaper: (where: WallpaperWhereUniqueInput) => WallpaperPromise;
  deleteManyWallpapers: (where?: WallpaperWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  refreshToken: (
    where?: RefreshTokenSubscriptionWhereInput
  ) => RefreshTokenSubscriptionPayloadSubscription;
  resetPasswordToken: (
    where?: ResetPasswordTokenSubscriptionWhereInput
  ) => ResetPasswordTokenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  wallpaper: (
    where?: WallpaperSubscriptionWhereInput
  ) => WallpaperSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "USER";

export type Source = "PEXELS" | "UNSPLASH";

export type WallpaperOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "wallpaperId_ASC"
  | "wallpaperId_DESC"
  | "source_ASC"
  | "source_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RefreshTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "refreshToken_ASC"
  | "refreshToken_DESC"
  | "accessToken_ASC"
  | "accessToken_DESC"
  | "expiresIn_ASC"
  | "expiresIn_DESC"
  | "revoke_ASC"
  | "revoke_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ResetPasswordTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "token_ASC"
  | "token_DESC"
  | "expiresIn_ASC"
  | "expiresIn_DESC"
  | "revoke_ASC"
  | "revoke_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "birthYear_ASC"
  | "birthYear_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type RefreshTokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  refreshToken?: Maybe<String>;
  accessToken?: Maybe<String>;
}>;

export interface WallpaperWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  wallpaperId?: Maybe<String>;
  wallpaperId_not?: Maybe<String>;
  wallpaperId_in?: Maybe<String[] | String>;
  wallpaperId_not_in?: Maybe<String[] | String>;
  wallpaperId_lt?: Maybe<String>;
  wallpaperId_lte?: Maybe<String>;
  wallpaperId_gt?: Maybe<String>;
  wallpaperId_gte?: Maybe<String>;
  wallpaperId_contains?: Maybe<String>;
  wallpaperId_not_contains?: Maybe<String>;
  wallpaperId_starts_with?: Maybe<String>;
  wallpaperId_not_starts_with?: Maybe<String>;
  wallpaperId_ends_with?: Maybe<String>;
  wallpaperId_not_ends_with?: Maybe<String>;
  source?: Maybe<Source>;
  source_not?: Maybe<Source>;
  source_in?: Maybe<Source[] | Source>;
  source_not_in?: Maybe<Source[] | Source>;
  user?: Maybe<UserWhereInput>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WallpaperWhereInput[] | WallpaperWhereInput>;
  OR?: Maybe<WallpaperWhereInput[] | WallpaperWhereInput>;
  NOT?: Maybe<WallpaperWhereInput[] | WallpaperWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  birthYear?: Maybe<Int>;
  birthYear_not?: Maybe<Int>;
  birthYear_in?: Maybe<Int[] | Int>;
  birthYear_not_in?: Maybe<Int[] | Int>;
  birthYear_lt?: Maybe<Int>;
  birthYear_lte?: Maybe<Int>;
  birthYear_gt?: Maybe<Int>;
  birthYear_gte?: Maybe<Int>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  verified?: Maybe<Boolean>;
  verified_not?: Maybe<Boolean>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  wallpapers_every?: Maybe<WallpaperWhereInput>;
  wallpapers_some?: Maybe<WallpaperWhereInput>;
  wallpapers_none?: Maybe<WallpaperWhereInput>;
  refreshTokens_every?: Maybe<RefreshTokenWhereInput>;
  refreshTokens_some?: Maybe<RefreshTokenWhereInput>;
  refreshTokens_none?: Maybe<RefreshTokenWhereInput>;
  resetPasswordTokens_every?: Maybe<ResetPasswordTokenWhereInput>;
  resetPasswordTokens_some?: Maybe<ResetPasswordTokenWhereInput>;
  resetPasswordTokens_none?: Maybe<ResetPasswordTokenWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RefreshTokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  refreshToken?: Maybe<String>;
  refreshToken_not?: Maybe<String>;
  refreshToken_in?: Maybe<String[] | String>;
  refreshToken_not_in?: Maybe<String[] | String>;
  refreshToken_lt?: Maybe<String>;
  refreshToken_lte?: Maybe<String>;
  refreshToken_gt?: Maybe<String>;
  refreshToken_gte?: Maybe<String>;
  refreshToken_contains?: Maybe<String>;
  refreshToken_not_contains?: Maybe<String>;
  refreshToken_starts_with?: Maybe<String>;
  refreshToken_not_starts_with?: Maybe<String>;
  refreshToken_ends_with?: Maybe<String>;
  refreshToken_not_ends_with?: Maybe<String>;
  accessToken?: Maybe<String>;
  accessToken_not?: Maybe<String>;
  accessToken_in?: Maybe<String[] | String>;
  accessToken_not_in?: Maybe<String[] | String>;
  accessToken_lt?: Maybe<String>;
  accessToken_lte?: Maybe<String>;
  accessToken_gt?: Maybe<String>;
  accessToken_gte?: Maybe<String>;
  accessToken_contains?: Maybe<String>;
  accessToken_not_contains?: Maybe<String>;
  accessToken_starts_with?: Maybe<String>;
  accessToken_not_starts_with?: Maybe<String>;
  accessToken_ends_with?: Maybe<String>;
  accessToken_not_ends_with?: Maybe<String>;
  expiresIn?: Maybe<String>;
  expiresIn_not?: Maybe<String>;
  expiresIn_in?: Maybe<String[] | String>;
  expiresIn_not_in?: Maybe<String[] | String>;
  expiresIn_lt?: Maybe<String>;
  expiresIn_lte?: Maybe<String>;
  expiresIn_gt?: Maybe<String>;
  expiresIn_gte?: Maybe<String>;
  expiresIn_contains?: Maybe<String>;
  expiresIn_not_contains?: Maybe<String>;
  expiresIn_starts_with?: Maybe<String>;
  expiresIn_not_starts_with?: Maybe<String>;
  expiresIn_ends_with?: Maybe<String>;
  expiresIn_not_ends_with?: Maybe<String>;
  revoke?: Maybe<Boolean>;
  revoke_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RefreshTokenWhereInput[] | RefreshTokenWhereInput>;
  OR?: Maybe<RefreshTokenWhereInput[] | RefreshTokenWhereInput>;
  NOT?: Maybe<RefreshTokenWhereInput[] | RefreshTokenWhereInput>;
}

export interface ResetPasswordTokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  expiresIn?: Maybe<String>;
  expiresIn_not?: Maybe<String>;
  expiresIn_in?: Maybe<String[] | String>;
  expiresIn_not_in?: Maybe<String[] | String>;
  expiresIn_lt?: Maybe<String>;
  expiresIn_lte?: Maybe<String>;
  expiresIn_gt?: Maybe<String>;
  expiresIn_gte?: Maybe<String>;
  expiresIn_contains?: Maybe<String>;
  expiresIn_not_contains?: Maybe<String>;
  expiresIn_starts_with?: Maybe<String>;
  expiresIn_not_starts_with?: Maybe<String>;
  expiresIn_ends_with?: Maybe<String>;
  expiresIn_not_ends_with?: Maybe<String>;
  revoke?: Maybe<Boolean>;
  revoke_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResetPasswordTokenWhereInput[] | ResetPasswordTokenWhereInput>;
  OR?: Maybe<ResetPasswordTokenWhereInput[] | ResetPasswordTokenWhereInput>;
  NOT?: Maybe<ResetPasswordTokenWhereInput[] | ResetPasswordTokenWhereInput>;
}

export type ResetPasswordTokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  token?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type WallpaperWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RefreshTokenCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRefreshTokensInput;
  refreshToken: String;
  accessToken: String;
  expiresIn: String;
  revoke?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutRefreshTokensInput {
  create?: Maybe<UserCreateWithoutRefreshTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRefreshTokensInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperCreateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenCreateManyWithoutUserInput>;
}

export interface WallpaperCreateManyWithoutUserInput {
  create?: Maybe<
    WallpaperCreateWithoutUserInput[] | WallpaperCreateWithoutUserInput
  >;
  connect?: Maybe<WallpaperWhereUniqueInput[] | WallpaperWhereUniqueInput>;
}

export interface WallpaperCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  wallpaperId: String;
  source: Source;
  rating?: Maybe<Float>;
}

export interface ResetPasswordTokenCreateManyWithoutUserInput {
  create?: Maybe<
    | ResetPasswordTokenCreateWithoutUserInput[]
    | ResetPasswordTokenCreateWithoutUserInput
  >;
  connect?: Maybe<
    ResetPasswordTokenWhereUniqueInput[] | ResetPasswordTokenWhereUniqueInput
  >;
}

export interface ResetPasswordTokenCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  token: String;
  expiresIn: String;
  revoke?: Maybe<Boolean>;
}

export interface RefreshTokenUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRefreshTokensInput>;
  refreshToken?: Maybe<String>;
  accessToken?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutRefreshTokensInput {
  create?: Maybe<UserCreateWithoutRefreshTokensInput>;
  update?: Maybe<UserUpdateWithoutRefreshTokensDataInput>;
  upsert?: Maybe<UserUpsertWithoutRefreshTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRefreshTokensDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthYear?: Maybe<Int>;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperUpdateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenUpdateManyWithoutUserInput>;
}

export interface WallpaperUpdateManyWithoutUserInput {
  create?: Maybe<
    WallpaperCreateWithoutUserInput[] | WallpaperCreateWithoutUserInput
  >;
  delete?: Maybe<WallpaperWhereUniqueInput[] | WallpaperWhereUniqueInput>;
  connect?: Maybe<WallpaperWhereUniqueInput[] | WallpaperWhereUniqueInput>;
  set?: Maybe<WallpaperWhereUniqueInput[] | WallpaperWhereUniqueInput>;
  disconnect?: Maybe<WallpaperWhereUniqueInput[] | WallpaperWhereUniqueInput>;
  update?: Maybe<
    | WallpaperUpdateWithWhereUniqueWithoutUserInput[]
    | WallpaperUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | WallpaperUpsertWithWhereUniqueWithoutUserInput[]
    | WallpaperUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<WallpaperScalarWhereInput[] | WallpaperScalarWhereInput>;
  updateMany?: Maybe<
    | WallpaperUpdateManyWithWhereNestedInput[]
    | WallpaperUpdateManyWithWhereNestedInput
  >;
}

export interface WallpaperUpdateWithWhereUniqueWithoutUserInput {
  where: WallpaperWhereUniqueInput;
  data: WallpaperUpdateWithoutUserDataInput;
}

export interface WallpaperUpdateWithoutUserDataInput {
  wallpaperId?: Maybe<String>;
  source?: Maybe<Source>;
  rating?: Maybe<Float>;
}

export interface WallpaperUpsertWithWhereUniqueWithoutUserInput {
  where: WallpaperWhereUniqueInput;
  update: WallpaperUpdateWithoutUserDataInput;
  create: WallpaperCreateWithoutUserInput;
}

export interface WallpaperScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  wallpaperId?: Maybe<String>;
  wallpaperId_not?: Maybe<String>;
  wallpaperId_in?: Maybe<String[] | String>;
  wallpaperId_not_in?: Maybe<String[] | String>;
  wallpaperId_lt?: Maybe<String>;
  wallpaperId_lte?: Maybe<String>;
  wallpaperId_gt?: Maybe<String>;
  wallpaperId_gte?: Maybe<String>;
  wallpaperId_contains?: Maybe<String>;
  wallpaperId_not_contains?: Maybe<String>;
  wallpaperId_starts_with?: Maybe<String>;
  wallpaperId_not_starts_with?: Maybe<String>;
  wallpaperId_ends_with?: Maybe<String>;
  wallpaperId_not_ends_with?: Maybe<String>;
  source?: Maybe<Source>;
  source_not?: Maybe<Source>;
  source_in?: Maybe<Source[] | Source>;
  source_not_in?: Maybe<Source[] | Source>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WallpaperScalarWhereInput[] | WallpaperScalarWhereInput>;
  OR?: Maybe<WallpaperScalarWhereInput[] | WallpaperScalarWhereInput>;
  NOT?: Maybe<WallpaperScalarWhereInput[] | WallpaperScalarWhereInput>;
}

export interface WallpaperUpdateManyWithWhereNestedInput {
  where: WallpaperScalarWhereInput;
  data: WallpaperUpdateManyDataInput;
}

export interface WallpaperUpdateManyDataInput {
  wallpaperId?: Maybe<String>;
  source?: Maybe<Source>;
  rating?: Maybe<Float>;
}

export interface ResetPasswordTokenUpdateManyWithoutUserInput {
  create?: Maybe<
    | ResetPasswordTokenCreateWithoutUserInput[]
    | ResetPasswordTokenCreateWithoutUserInput
  >;
  delete?: Maybe<
    ResetPasswordTokenWhereUniqueInput[] | ResetPasswordTokenWhereUniqueInput
  >;
  connect?: Maybe<
    ResetPasswordTokenWhereUniqueInput[] | ResetPasswordTokenWhereUniqueInput
  >;
  set?: Maybe<
    ResetPasswordTokenWhereUniqueInput[] | ResetPasswordTokenWhereUniqueInput
  >;
  disconnect?: Maybe<
    ResetPasswordTokenWhereUniqueInput[] | ResetPasswordTokenWhereUniqueInput
  >;
  update?: Maybe<
    | ResetPasswordTokenUpdateWithWhereUniqueWithoutUserInput[]
    | ResetPasswordTokenUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ResetPasswordTokenUpsertWithWhereUniqueWithoutUserInput[]
    | ResetPasswordTokenUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ResetPasswordTokenScalarWhereInput[] | ResetPasswordTokenScalarWhereInput
  >;
  updateMany?: Maybe<
    | ResetPasswordTokenUpdateManyWithWhereNestedInput[]
    | ResetPasswordTokenUpdateManyWithWhereNestedInput
  >;
}

export interface ResetPasswordTokenUpdateWithWhereUniqueWithoutUserInput {
  where: ResetPasswordTokenWhereUniqueInput;
  data: ResetPasswordTokenUpdateWithoutUserDataInput;
}

export interface ResetPasswordTokenUpdateWithoutUserDataInput {
  token?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface ResetPasswordTokenUpsertWithWhereUniqueWithoutUserInput {
  where: ResetPasswordTokenWhereUniqueInput;
  update: ResetPasswordTokenUpdateWithoutUserDataInput;
  create: ResetPasswordTokenCreateWithoutUserInput;
}

export interface ResetPasswordTokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  expiresIn?: Maybe<String>;
  expiresIn_not?: Maybe<String>;
  expiresIn_in?: Maybe<String[] | String>;
  expiresIn_not_in?: Maybe<String[] | String>;
  expiresIn_lt?: Maybe<String>;
  expiresIn_lte?: Maybe<String>;
  expiresIn_gt?: Maybe<String>;
  expiresIn_gte?: Maybe<String>;
  expiresIn_contains?: Maybe<String>;
  expiresIn_not_contains?: Maybe<String>;
  expiresIn_starts_with?: Maybe<String>;
  expiresIn_not_starts_with?: Maybe<String>;
  expiresIn_ends_with?: Maybe<String>;
  expiresIn_not_ends_with?: Maybe<String>;
  revoke?: Maybe<Boolean>;
  revoke_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ResetPasswordTokenScalarWhereInput[] | ResetPasswordTokenScalarWhereInput
  >;
  OR?: Maybe<
    ResetPasswordTokenScalarWhereInput[] | ResetPasswordTokenScalarWhereInput
  >;
  NOT?: Maybe<
    ResetPasswordTokenScalarWhereInput[] | ResetPasswordTokenScalarWhereInput
  >;
}

export interface ResetPasswordTokenUpdateManyWithWhereNestedInput {
  where: ResetPasswordTokenScalarWhereInput;
  data: ResetPasswordTokenUpdateManyDataInput;
}

export interface ResetPasswordTokenUpdateManyDataInput {
  token?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface UserUpsertWithoutRefreshTokensInput {
  update: UserUpdateWithoutRefreshTokensDataInput;
  create: UserCreateWithoutRefreshTokensInput;
}

export interface RefreshTokenUpdateManyMutationInput {
  refreshToken?: Maybe<String>;
  accessToken?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface ResetPasswordTokenCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutResetPasswordTokensInput;
  token: String;
  expiresIn: String;
  revoke?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutResetPasswordTokensInput {
  create?: Maybe<UserCreateWithoutResetPasswordTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutResetPasswordTokensInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperCreateManyWithoutUserInput>;
  refreshTokens?: Maybe<RefreshTokenCreateManyWithoutUserInput>;
}

export interface RefreshTokenCreateManyWithoutUserInput {
  create?: Maybe<
    RefreshTokenCreateWithoutUserInput[] | RefreshTokenCreateWithoutUserInput
  >;
  connect?: Maybe<
    RefreshTokenWhereUniqueInput[] | RefreshTokenWhereUniqueInput
  >;
}

export interface RefreshTokenCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  refreshToken: String;
  accessToken: String;
  expiresIn: String;
  revoke?: Maybe<Boolean>;
}

export interface ResetPasswordTokenUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutResetPasswordTokensInput>;
  token?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutResetPasswordTokensInput {
  create?: Maybe<UserCreateWithoutResetPasswordTokensInput>;
  update?: Maybe<UserUpdateWithoutResetPasswordTokensDataInput>;
  upsert?: Maybe<UserUpsertWithoutResetPasswordTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutResetPasswordTokensDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthYear?: Maybe<Int>;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperUpdateManyWithoutUserInput>;
  refreshTokens?: Maybe<RefreshTokenUpdateManyWithoutUserInput>;
}

export interface RefreshTokenUpdateManyWithoutUserInput {
  create?: Maybe<
    RefreshTokenCreateWithoutUserInput[] | RefreshTokenCreateWithoutUserInput
  >;
  delete?: Maybe<RefreshTokenWhereUniqueInput[] | RefreshTokenWhereUniqueInput>;
  connect?: Maybe<
    RefreshTokenWhereUniqueInput[] | RefreshTokenWhereUniqueInput
  >;
  set?: Maybe<RefreshTokenWhereUniqueInput[] | RefreshTokenWhereUniqueInput>;
  disconnect?: Maybe<
    RefreshTokenWhereUniqueInput[] | RefreshTokenWhereUniqueInput
  >;
  update?: Maybe<
    | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    | RefreshTokenUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    | RefreshTokenUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    RefreshTokenScalarWhereInput[] | RefreshTokenScalarWhereInput
  >;
  updateMany?: Maybe<
    | RefreshTokenUpdateManyWithWhereNestedInput[]
    | RefreshTokenUpdateManyWithWhereNestedInput
  >;
}

export interface RefreshTokenUpdateWithWhereUniqueWithoutUserInput {
  where: RefreshTokenWhereUniqueInput;
  data: RefreshTokenUpdateWithoutUserDataInput;
}

export interface RefreshTokenUpdateWithoutUserDataInput {
  refreshToken?: Maybe<String>;
  accessToken?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface RefreshTokenUpsertWithWhereUniqueWithoutUserInput {
  where: RefreshTokenWhereUniqueInput;
  update: RefreshTokenUpdateWithoutUserDataInput;
  create: RefreshTokenCreateWithoutUserInput;
}

export interface RefreshTokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  refreshToken?: Maybe<String>;
  refreshToken_not?: Maybe<String>;
  refreshToken_in?: Maybe<String[] | String>;
  refreshToken_not_in?: Maybe<String[] | String>;
  refreshToken_lt?: Maybe<String>;
  refreshToken_lte?: Maybe<String>;
  refreshToken_gt?: Maybe<String>;
  refreshToken_gte?: Maybe<String>;
  refreshToken_contains?: Maybe<String>;
  refreshToken_not_contains?: Maybe<String>;
  refreshToken_starts_with?: Maybe<String>;
  refreshToken_not_starts_with?: Maybe<String>;
  refreshToken_ends_with?: Maybe<String>;
  refreshToken_not_ends_with?: Maybe<String>;
  accessToken?: Maybe<String>;
  accessToken_not?: Maybe<String>;
  accessToken_in?: Maybe<String[] | String>;
  accessToken_not_in?: Maybe<String[] | String>;
  accessToken_lt?: Maybe<String>;
  accessToken_lte?: Maybe<String>;
  accessToken_gt?: Maybe<String>;
  accessToken_gte?: Maybe<String>;
  accessToken_contains?: Maybe<String>;
  accessToken_not_contains?: Maybe<String>;
  accessToken_starts_with?: Maybe<String>;
  accessToken_not_starts_with?: Maybe<String>;
  accessToken_ends_with?: Maybe<String>;
  accessToken_not_ends_with?: Maybe<String>;
  expiresIn?: Maybe<String>;
  expiresIn_not?: Maybe<String>;
  expiresIn_in?: Maybe<String[] | String>;
  expiresIn_not_in?: Maybe<String[] | String>;
  expiresIn_lt?: Maybe<String>;
  expiresIn_lte?: Maybe<String>;
  expiresIn_gt?: Maybe<String>;
  expiresIn_gte?: Maybe<String>;
  expiresIn_contains?: Maybe<String>;
  expiresIn_not_contains?: Maybe<String>;
  expiresIn_starts_with?: Maybe<String>;
  expiresIn_not_starts_with?: Maybe<String>;
  expiresIn_ends_with?: Maybe<String>;
  expiresIn_not_ends_with?: Maybe<String>;
  revoke?: Maybe<Boolean>;
  revoke_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RefreshTokenScalarWhereInput[] | RefreshTokenScalarWhereInput>;
  OR?: Maybe<RefreshTokenScalarWhereInput[] | RefreshTokenScalarWhereInput>;
  NOT?: Maybe<RefreshTokenScalarWhereInput[] | RefreshTokenScalarWhereInput>;
}

export interface RefreshTokenUpdateManyWithWhereNestedInput {
  where: RefreshTokenScalarWhereInput;
  data: RefreshTokenUpdateManyDataInput;
}

export interface RefreshTokenUpdateManyDataInput {
  refreshToken?: Maybe<String>;
  accessToken?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface UserUpsertWithoutResetPasswordTokensInput {
  update: UserUpdateWithoutResetPasswordTokensDataInput;
  create: UserCreateWithoutResetPasswordTokensInput;
}

export interface ResetPasswordTokenUpdateManyMutationInput {
  token?: Maybe<String>;
  expiresIn?: Maybe<String>;
  revoke?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperCreateManyWithoutUserInput>;
  refreshTokens?: Maybe<RefreshTokenCreateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthYear?: Maybe<Int>;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  wallpapers?: Maybe<WallpaperUpdateManyWithoutUserInput>;
  refreshTokens?: Maybe<RefreshTokenUpdateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthYear?: Maybe<Int>;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
}

export interface WallpaperCreateInput {
  id?: Maybe<ID_Input>;
  wallpaperId: String;
  source: Source;
  user: UserCreateOneWithoutWallpapersInput;
  rating?: Maybe<Float>;
}

export interface UserCreateOneWithoutWallpapersInput {
  create?: Maybe<UserCreateWithoutWallpapersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutWallpapersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  refreshTokens?: Maybe<RefreshTokenCreateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenCreateManyWithoutUserInput>;
}

export interface WallpaperUpdateInput {
  wallpaperId?: Maybe<String>;
  source?: Maybe<Source>;
  user?: Maybe<UserUpdateOneRequiredWithoutWallpapersInput>;
  rating?: Maybe<Float>;
}

export interface UserUpdateOneRequiredWithoutWallpapersInput {
  create?: Maybe<UserCreateWithoutWallpapersInput>;
  update?: Maybe<UserUpdateWithoutWallpapersDataInput>;
  upsert?: Maybe<UserUpsertWithoutWallpapersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutWallpapersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthYear?: Maybe<Int>;
  avatar?: Maybe<String>;
  verified?: Maybe<Boolean>;
  role?: Maybe<Role>;
  refreshTokens?: Maybe<RefreshTokenUpdateManyWithoutUserInput>;
  resetPasswordTokens?: Maybe<ResetPasswordTokenUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutWallpapersInput {
  update: UserUpdateWithoutWallpapersDataInput;
  create: UserCreateWithoutWallpapersInput;
}

export interface WallpaperUpdateManyMutationInput {
  wallpaperId?: Maybe<String>;
  source?: Maybe<Source>;
  rating?: Maybe<Float>;
}

export interface RefreshTokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RefreshTokenWhereInput>;
  AND?: Maybe<
    RefreshTokenSubscriptionWhereInput[] | RefreshTokenSubscriptionWhereInput
  >;
  OR?: Maybe<
    RefreshTokenSubscriptionWhereInput[] | RefreshTokenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RefreshTokenSubscriptionWhereInput[] | RefreshTokenSubscriptionWhereInput
  >;
}

export interface ResetPasswordTokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResetPasswordTokenWhereInput>;
  AND?: Maybe<
    | ResetPasswordTokenSubscriptionWhereInput[]
    | ResetPasswordTokenSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ResetPasswordTokenSubscriptionWhereInput[]
    | ResetPasswordTokenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ResetPasswordTokenSubscriptionWhereInput[]
    | ResetPasswordTokenSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WallpaperSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WallpaperWhereInput>;
  AND?: Maybe<
    WallpaperSubscriptionWhereInput[] | WallpaperSubscriptionWhereInput
  >;
  OR?: Maybe<
    WallpaperSubscriptionWhereInput[] | WallpaperSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WallpaperSubscriptionWhereInput[] | WallpaperSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface RefreshToken {
  id: ID_Output;
  refreshToken: String;
  accessToken: String;
  expiresIn: String;
  revoke?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RefreshTokenPromise
  extends Promise<RefreshToken>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  refreshToken: () => Promise<String>;
  accessToken: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RefreshTokenSubscription
  extends Promise<AsyncIterator<RefreshToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  refreshToken: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  expiresIn: () => Promise<AsyncIterator<String>>;
  revoke: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RefreshTokenNullablePromise
  extends Promise<RefreshToken | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  refreshToken: () => Promise<String>;
  accessToken: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: String;
  verified?: Boolean;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthYear: () => Promise<Int>;
  avatar: () => Promise<String>;
  verified: () => Promise<Boolean>;
  role: () => Promise<Role>;
  wallpapers: <T = FragmentableArray<Wallpaper>>(args?: {
    where?: WallpaperWhereInput;
    orderBy?: WallpaperOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  refreshTokens: <T = FragmentableArray<RefreshToken>>(args?: {
    where?: RefreshTokenWhereInput;
    orderBy?: RefreshTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetPasswordTokens: <T = FragmentableArray<ResetPasswordToken>>(args?: {
    where?: ResetPasswordTokenWhereInput;
    orderBy?: ResetPasswordTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthYear: () => Promise<AsyncIterator<Int>>;
  avatar: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<Role>>;
  wallpapers: <T = Promise<AsyncIterator<WallpaperSubscription>>>(args?: {
    where?: WallpaperWhereInput;
    orderBy?: WallpaperOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  refreshTokens: <T = Promise<AsyncIterator<RefreshTokenSubscription>>>(args?: {
    where?: RefreshTokenWhereInput;
    orderBy?: RefreshTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetPasswordTokens: <
    T = Promise<AsyncIterator<ResetPasswordTokenSubscription>>
  >(args?: {
    where?: ResetPasswordTokenWhereInput;
    orderBy?: ResetPasswordTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthYear: () => Promise<Int>;
  avatar: () => Promise<String>;
  verified: () => Promise<Boolean>;
  role: () => Promise<Role>;
  wallpapers: <T = FragmentableArray<Wallpaper>>(args?: {
    where?: WallpaperWhereInput;
    orderBy?: WallpaperOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  refreshTokens: <T = FragmentableArray<RefreshToken>>(args?: {
    where?: RefreshTokenWhereInput;
    orderBy?: RefreshTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetPasswordTokens: <T = FragmentableArray<ResetPasswordToken>>(args?: {
    where?: ResetPasswordTokenWhereInput;
    orderBy?: ResetPasswordTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Wallpaper {
  id: ID_Output;
  wallpaperId: String;
  source: Source;
  rating?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WallpaperPromise extends Promise<Wallpaper>, Fragmentable {
  id: () => Promise<ID_Output>;
  wallpaperId: () => Promise<String>;
  source: () => Promise<Source>;
  user: <T = UserPromise>() => T;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WallpaperSubscription
  extends Promise<AsyncIterator<Wallpaper>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wallpaperId: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<Source>>;
  user: <T = UserSubscription>() => T;
  rating: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WallpaperNullablePromise
  extends Promise<Wallpaper | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  wallpaperId: () => Promise<String>;
  source: () => Promise<Source>;
  user: <T = UserPromise>() => T;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ResetPasswordToken {
  id: ID_Output;
  token: String;
  expiresIn: String;
  revoke?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ResetPasswordTokenPromise
  extends Promise<ResetPasswordToken>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  token: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ResetPasswordTokenSubscription
  extends Promise<AsyncIterator<ResetPasswordToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  token: () => Promise<AsyncIterator<String>>;
  expiresIn: () => Promise<AsyncIterator<String>>;
  revoke: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResetPasswordTokenNullablePromise
  extends Promise<ResetPasswordToken | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  token: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RefreshTokenConnection {
  pageInfo: PageInfo;
  edges: RefreshTokenEdge[];
}

export interface RefreshTokenConnectionPromise
  extends Promise<RefreshTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RefreshTokenEdge>>() => T;
  aggregate: <T = AggregateRefreshTokenPromise>() => T;
}

export interface RefreshTokenConnectionSubscription
  extends Promise<AsyncIterator<RefreshTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RefreshTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRefreshTokenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RefreshTokenEdge {
  node: RefreshToken;
  cursor: String;
}

export interface RefreshTokenEdgePromise
  extends Promise<RefreshTokenEdge>,
    Fragmentable {
  node: <T = RefreshTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RefreshTokenEdgeSubscription
  extends Promise<AsyncIterator<RefreshTokenEdge>>,
    Fragmentable {
  node: <T = RefreshTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRefreshToken {
  count: Int;
}

export interface AggregateRefreshTokenPromise
  extends Promise<AggregateRefreshToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRefreshTokenSubscription
  extends Promise<AsyncIterator<AggregateRefreshToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResetPasswordTokenConnection {
  pageInfo: PageInfo;
  edges: ResetPasswordTokenEdge[];
}

export interface ResetPasswordTokenConnectionPromise
  extends Promise<ResetPasswordTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResetPasswordTokenEdge>>() => T;
  aggregate: <T = AggregateResetPasswordTokenPromise>() => T;
}

export interface ResetPasswordTokenConnectionSubscription
  extends Promise<AsyncIterator<ResetPasswordTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ResetPasswordTokenEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateResetPasswordTokenSubscription>() => T;
}

export interface ResetPasswordTokenEdge {
  node: ResetPasswordToken;
  cursor: String;
}

export interface ResetPasswordTokenEdgePromise
  extends Promise<ResetPasswordTokenEdge>,
    Fragmentable {
  node: <T = ResetPasswordTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResetPasswordTokenEdgeSubscription
  extends Promise<AsyncIterator<ResetPasswordTokenEdge>>,
    Fragmentable {
  node: <T = ResetPasswordTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResetPasswordToken {
  count: Int;
}

export interface AggregateResetPasswordTokenPromise
  extends Promise<AggregateResetPasswordToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResetPasswordTokenSubscription
  extends Promise<AsyncIterator<AggregateResetPasswordToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WallpaperConnection {
  pageInfo: PageInfo;
  edges: WallpaperEdge[];
}

export interface WallpaperConnectionPromise
  extends Promise<WallpaperConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WallpaperEdge>>() => T;
  aggregate: <T = AggregateWallpaperPromise>() => T;
}

export interface WallpaperConnectionSubscription
  extends Promise<AsyncIterator<WallpaperConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WallpaperEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWallpaperSubscription>() => T;
}

export interface WallpaperEdge {
  node: Wallpaper;
  cursor: String;
}

export interface WallpaperEdgePromise
  extends Promise<WallpaperEdge>,
    Fragmentable {
  node: <T = WallpaperPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WallpaperEdgeSubscription
  extends Promise<AsyncIterator<WallpaperEdge>>,
    Fragmentable {
  node: <T = WallpaperSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWallpaper {
  count: Int;
}

export interface AggregateWallpaperPromise
  extends Promise<AggregateWallpaper>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWallpaperSubscription
  extends Promise<AsyncIterator<AggregateWallpaper>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface RefreshTokenSubscriptionPayload {
  mutation: MutationType;
  node: RefreshToken;
  updatedFields: String[];
  previousValues: RefreshTokenPreviousValues;
}

export interface RefreshTokenSubscriptionPayloadPromise
  extends Promise<RefreshTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RefreshTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RefreshTokenPreviousValuesPromise>() => T;
}

export interface RefreshTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RefreshTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RefreshTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RefreshTokenPreviousValuesSubscription>() => T;
}

export interface RefreshTokenPreviousValues {
  id: ID_Output;
  refreshToken: String;
  accessToken: String;
  expiresIn: String;
  revoke?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RefreshTokenPreviousValuesPromise
  extends Promise<RefreshTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  refreshToken: () => Promise<String>;
  accessToken: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RefreshTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<RefreshTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  refreshToken: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  expiresIn: () => Promise<AsyncIterator<String>>;
  revoke: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResetPasswordTokenSubscriptionPayload {
  mutation: MutationType;
  node: ResetPasswordToken;
  updatedFields: String[];
  previousValues: ResetPasswordTokenPreviousValues;
}

export interface ResetPasswordTokenSubscriptionPayloadPromise
  extends Promise<ResetPasswordTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResetPasswordTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResetPasswordTokenPreviousValuesPromise>() => T;
}

export interface ResetPasswordTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResetPasswordTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResetPasswordTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResetPasswordTokenPreviousValuesSubscription>() => T;
}

export interface ResetPasswordTokenPreviousValues {
  id: ID_Output;
  token: String;
  expiresIn: String;
  revoke?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ResetPasswordTokenPreviousValuesPromise
  extends Promise<ResetPasswordTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  expiresIn: () => Promise<String>;
  revoke: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ResetPasswordTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<ResetPasswordTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  expiresIn: () => Promise<AsyncIterator<String>>;
  revoke: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  birthYear: Int;
  avatar?: String;
  verified?: Boolean;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthYear: () => Promise<Int>;
  avatar: () => Promise<String>;
  verified: () => Promise<Boolean>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthYear: () => Promise<AsyncIterator<Int>>;
  avatar: () => Promise<AsyncIterator<String>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WallpaperSubscriptionPayload {
  mutation: MutationType;
  node: Wallpaper;
  updatedFields: String[];
  previousValues: WallpaperPreviousValues;
}

export interface WallpaperSubscriptionPayloadPromise
  extends Promise<WallpaperSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WallpaperPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WallpaperPreviousValuesPromise>() => T;
}

export interface WallpaperSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WallpaperSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WallpaperSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WallpaperPreviousValuesSubscription>() => T;
}

export interface WallpaperPreviousValues {
  id: ID_Output;
  wallpaperId: String;
  source: Source;
  rating?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WallpaperPreviousValuesPromise
  extends Promise<WallpaperPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  wallpaperId: () => Promise<String>;
  source: () => Promise<Source>;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WallpaperPreviousValuesSubscription
  extends Promise<AsyncIterator<WallpaperPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wallpaperId: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<Source>>;
  rating: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Wallpaper",
    embedded: false
  },
  {
    name: "RefreshToken",
    embedded: false
  },
  {
    name: "ResetPasswordToken",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Source",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
