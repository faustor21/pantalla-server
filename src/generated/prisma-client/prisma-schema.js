module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFavoriteWallpaper {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type FavoriteWallpaper {
  id: ID!
  wallpaperId: String!
  source: Source!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FavoriteWallpaperConnection {
  pageInfo: PageInfo!
  edges: [FavoriteWallpaperEdge]!
  aggregate: AggregateFavoriteWallpaper!
}

input FavoriteWallpaperCreateInput {
  id: ID
  wallpaperId: String!
  source: Source!
  user: UserCreateOneWithoutFavoriteWallpapersInput!
}

input FavoriteWallpaperCreateManyWithoutUserInput {
  create: [FavoriteWallpaperCreateWithoutUserInput!]
  connect: [FavoriteWallpaperWhereUniqueInput!]
}

input FavoriteWallpaperCreateWithoutUserInput {
  id: ID
  wallpaperId: String!
  source: Source!
}

type FavoriteWallpaperEdge {
  node: FavoriteWallpaper!
  cursor: String!
}

enum FavoriteWallpaperOrderByInput {
  id_ASC
  id_DESC
  wallpaperId_ASC
  wallpaperId_DESC
  source_ASC
  source_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FavoriteWallpaperPreviousValues {
  id: ID!
  wallpaperId: String!
  source: Source!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FavoriteWallpaperScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  wallpaperId: String
  wallpaperId_not: String
  wallpaperId_in: [String!]
  wallpaperId_not_in: [String!]
  wallpaperId_lt: String
  wallpaperId_lte: String
  wallpaperId_gt: String
  wallpaperId_gte: String
  wallpaperId_contains: String
  wallpaperId_not_contains: String
  wallpaperId_starts_with: String
  wallpaperId_not_starts_with: String
  wallpaperId_ends_with: String
  wallpaperId_not_ends_with: String
  source: Source
  source_not: Source
  source_in: [Source!]
  source_not_in: [Source!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteWallpaperScalarWhereInput!]
  OR: [FavoriteWallpaperScalarWhereInput!]
  NOT: [FavoriteWallpaperScalarWhereInput!]
}

type FavoriteWallpaperSubscriptionPayload {
  mutation: MutationType!
  node: FavoriteWallpaper
  updatedFields: [String!]
  previousValues: FavoriteWallpaperPreviousValues
}

input FavoriteWallpaperSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FavoriteWallpaperWhereInput
  AND: [FavoriteWallpaperSubscriptionWhereInput!]
  OR: [FavoriteWallpaperSubscriptionWhereInput!]
  NOT: [FavoriteWallpaperSubscriptionWhereInput!]
}

input FavoriteWallpaperUpdateInput {
  wallpaperId: String
  source: Source
  user: UserUpdateOneRequiredWithoutFavoriteWallpapersInput
}

input FavoriteWallpaperUpdateManyDataInput {
  wallpaperId: String
  source: Source
}

input FavoriteWallpaperUpdateManyMutationInput {
  wallpaperId: String
  source: Source
}

input FavoriteWallpaperUpdateManyWithoutUserInput {
  create: [FavoriteWallpaperCreateWithoutUserInput!]
  delete: [FavoriteWallpaperWhereUniqueInput!]
  connect: [FavoriteWallpaperWhereUniqueInput!]
  set: [FavoriteWallpaperWhereUniqueInput!]
  disconnect: [FavoriteWallpaperWhereUniqueInput!]
  update: [FavoriteWallpaperUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FavoriteWallpaperUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FavoriteWallpaperScalarWhereInput!]
  updateMany: [FavoriteWallpaperUpdateManyWithWhereNestedInput!]
}

input FavoriteWallpaperUpdateManyWithWhereNestedInput {
  where: FavoriteWallpaperScalarWhereInput!
  data: FavoriteWallpaperUpdateManyDataInput!
}

input FavoriteWallpaperUpdateWithoutUserDataInput {
  wallpaperId: String
  source: Source
}

input FavoriteWallpaperUpdateWithWhereUniqueWithoutUserInput {
  where: FavoriteWallpaperWhereUniqueInput!
  data: FavoriteWallpaperUpdateWithoutUserDataInput!
}

input FavoriteWallpaperUpsertWithWhereUniqueWithoutUserInput {
  where: FavoriteWallpaperWhereUniqueInput!
  update: FavoriteWallpaperUpdateWithoutUserDataInput!
  create: FavoriteWallpaperCreateWithoutUserInput!
}

input FavoriteWallpaperWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  wallpaperId: String
  wallpaperId_not: String
  wallpaperId_in: [String!]
  wallpaperId_not_in: [String!]
  wallpaperId_lt: String
  wallpaperId_lte: String
  wallpaperId_gt: String
  wallpaperId_gte: String
  wallpaperId_contains: String
  wallpaperId_not_contains: String
  wallpaperId_starts_with: String
  wallpaperId_not_starts_with: String
  wallpaperId_ends_with: String
  wallpaperId_not_ends_with: String
  source: Source
  source_not: Source
  source_in: [Source!]
  source_not_in: [Source!]
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteWallpaperWhereInput!]
  OR: [FavoriteWallpaperWhereInput!]
  NOT: [FavoriteWallpaperWhereInput!]
}

input FavoriteWallpaperWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFavoriteWallpaper(data: FavoriteWallpaperCreateInput!): FavoriteWallpaper!
  updateFavoriteWallpaper(data: FavoriteWallpaperUpdateInput!, where: FavoriteWallpaperWhereUniqueInput!): FavoriteWallpaper
  updateManyFavoriteWallpapers(data: FavoriteWallpaperUpdateManyMutationInput!, where: FavoriteWallpaperWhereInput): BatchPayload!
  upsertFavoriteWallpaper(where: FavoriteWallpaperWhereUniqueInput!, create: FavoriteWallpaperCreateInput!, update: FavoriteWallpaperUpdateInput!): FavoriteWallpaper!
  deleteFavoriteWallpaper(where: FavoriteWallpaperWhereUniqueInput!): FavoriteWallpaper
  deleteManyFavoriteWallpapers(where: FavoriteWallpaperWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  favoriteWallpaper(where: FavoriteWallpaperWhereUniqueInput!): FavoriteWallpaper
  favoriteWallpapers(where: FavoriteWallpaperWhereInput, orderBy: FavoriteWallpaperOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteWallpaper]!
  favoriteWallpapersConnection(where: FavoriteWallpaperWhereInput, orderBy: FavoriteWallpaperOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteWallpaperConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Source {
  PEXELS
  UNSPLASH
}

type Subscription {
  favoriteWallpaper(where: FavoriteWallpaperSubscriptionWhereInput): FavoriteWallpaperSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  avatar: String
  favoriteWallpapers(where: FavoriteWallpaperWhereInput, orderBy: FavoriteWallpaperOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FavoriteWallpaper!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  avatar: String
  favoriteWallpapers: FavoriteWallpaperCreateManyWithoutUserInput
}

input UserCreateOneWithoutFavoriteWallpapersInput {
  create: UserCreateWithoutFavoriteWallpapersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFavoriteWallpapersInput {
  id: ID
  name: String!
  email: String!
  password: String!
  avatar: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  avatar_ASC
  avatar_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  avatar: String
  favoriteWallpapers: FavoriteWallpaperUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  avatar: String
}

input UserUpdateOneRequiredWithoutFavoriteWallpapersInput {
  create: UserCreateWithoutFavoriteWallpapersInput
  update: UserUpdateWithoutFavoriteWallpapersDataInput
  upsert: UserUpsertWithoutFavoriteWallpapersInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFavoriteWallpapersDataInput {
  name: String
  email: String
  password: String
  avatar: String
}

input UserUpsertWithoutFavoriteWallpapersInput {
  update: UserUpdateWithoutFavoriteWallpapersDataInput!
  create: UserCreateWithoutFavoriteWallpapersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  favoriteWallpapers_every: FavoriteWallpaperWhereInput
  favoriteWallpapers_some: FavoriteWallpaperWhereInput
  favoriteWallpapers_none: FavoriteWallpaperWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    