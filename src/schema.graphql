type Query {
  users: [User!]!
  user(userId: ID!): User!
  wallpaper(wallpaperId: ID!): Wallpaper!
  getAllUserWallpapers: [Wallpaper!]!
  getAllWallpapers: [Wallpaper!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  renewUserAccessToken(refreshToken: String!): AuthPayload!
  resetPassword(email: String!): String!
  updateUser(data: UpdateUserInput!, userId: ID!): User!
  deleteUser(userId: ID!): User!
  createWallpaper(data: WallpaperInput!): Wallpaper!
  deleteWallpaper(wallpaperId: ID!): Wallpaper!
}

type User {
  id: ID!
  name: String!
  email: String!
  avatar: String
  wallpapers: [Wallpaper!]!
  createdAt: String!
  updatedAt: String!
}

# User's wallpapers
type Wallpaper {
  id: ID!
  wallpaperId: String! # This is the wallpaper's id given by the source, not the local id
  source: Source!
  user: User!
  rating: Float
  createdAt: String!
  updatedAt: String!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
}

enum Source {
  PEXELS
  UNSPLASH
}

input WallpaperInput {
  wallpaperId: String!
  source: String!
  rating: Float
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  repeatPassword: String!
  birthYear: Int!
  avatar: String
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  birthYear: Int
  avatar: String
}
