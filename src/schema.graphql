type Query {
  users: [User!]!
  user(userId: ID!): User!
  favoriteWallpapers: [FavoriteWallpaper!]!
  favoriteWallpaper(favoriteWallpaperId: ID!): FavoriteWallpaper!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!, userId: ID!): User!
  deleteUser(userId: ID!): User!
  createFavoriteWallpaper(
    data: CreateFavoriteWallpaperInput!
  ): FavoriteWallpaper!
  deleteFavoriteWallpaper(wallpaperId: ID!): FavoriteWallpaper!
}

type User {
  id: ID!
  name: String!
  email: String!
  avatar: String
  favoriteWallpapers: [FavoriteWallpaper!]!
  createdAt: String!
  updatedAt: String!
}

# User's favorites wallpapers
type FavoriteWallpaper {
  id: ID!
  wallpaperId: String! # This is the wallpaper's id given by the source, not the local id
  source: Source!
  user: User!
  createdAt: String!
  updatedAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}

enum Source {
  PEXELS
  UNSPLASH
}

input CreateFavoriteWallpaperInput {
  wallpaperId: String!
  source: String!
  user: ID!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}
